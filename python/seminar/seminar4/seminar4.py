# Напишите функцию to_dict(lst), которая принимает аргумент в виде списка и возвращает
# словарь, в котором каждый элемент списка является и ключом и значением. Предполагается,
# что элементы списка будут соответствовать правилам задания ключей в словарях.


# def to_dict(lst):
#     return {element: element for element in lst}
#
# # Тесты
# print(to_dict([1, 2, 3, 4]))
# print(to_dict(['grey', (2, 17), 3.11, -4]))


# l = [(1, 2), (3, 4), (5, 6)]
# d = dict((k, [i[0] for i in l if i[1] == k]) for k in frozenset(j[1] for j in l))
# print(d)

# 20. Задайте список. Напишите программу, которая определит, присутствует ли в заданном
# списке строк некое число.
# будем искать число 3 в одной из строк списка
#
# spisok = ["случайная строка 1", "случайная строка 2", "случайная строка 3"]
#
# print(any('3' in row for row in spisok))

# На вход программе подается строка текста из натуральных чисел. Из неё формируется список чисел. Напишите программу
# подсчета количества чисел, которые больше предшествующего им в этом списке числа, то есть, стоят вслед за меньшим числом.
#
# Формат входных данных
# На вход программе подается строка текста из разделенных пробелами натуральных чисел.
#
# Формат выходных данных
# Программа должна вывести одно число – количество элементов списка, больших предыдущего.
#
# Тестовые данные 🟢
# Sample Input 1:
# 1 2 3 4 5
# Sample Output 1:
# 4
# Sample Input 2:
# 1 1 3 2 2 1 1 1 1
# Sample Output 2:
# 1
# Sample Input 3:
# 5 4 3 2 1
# Sample Output 3:
# 0
g= list(map(int, input().split()))
t=0
for i in range(1,len(g)):
    if g[i]>g[i-1]:
        t=t+1
print(t)
